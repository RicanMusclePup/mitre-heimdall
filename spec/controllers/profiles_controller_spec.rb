require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ProfilesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Profile. As you add validations to Profile, be sure to
  # adjust the attributes here as well.

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ProfilesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  context 'User is logged in' do
    let(:admin) { FactoryBot.create(:admin) }
    let(:user) { FactoryBot.create(:editor) }
    before do
      db_sign_in user
    end

    describe 'GET #index' do
      it 'returns a success response' do
        create :profile, created_by: user
        get :index, params: {}, session: valid_session
        expect(response).to be_successful
      end
    end

    describe 'GET #show' do
      it 'returns a success response' do
        profile = create :profile, created_by: user
        get :show, params: { id: profile.to_param }, session: valid_session
        expect(response).to be_successful
      end
    end

    describe 'GET #details' do
      it 'returns a success response' do
        profile = create :profile, created_by: user
        get :details, params: { id: profile.to_param }, session: valid_session
        expect(response).to be_successful
      end
    end

    describe 'GET #nist' do
      it 'returns a success response' do
        profile_hash = Profile.transform(JSON.parse(File.open('spec/support/nginx_profile.json', 'r').read))
        profile_hash[:created_by_id] = user.id
        profile = Profile.create(profile_hash)
        get :nist, params: { format: 'json', id: profile.to_param, category: 'Medium' }, session: valid_session
        expect(response.content_type).to eq('application/json')
      end
    end

    describe 'POST #upload' do
      it 'can upload a profile' do
        @file = fixture_file_upload('spec/support/nginx_profile.json', 'text/json')
        post :upload, params: { file: @file }, session: valid_session
        expect(response).to redirect_to(Profile.last)
      end

      it 'rejects a malformed profile' do
        @file = fixture_file_upload('spec/support/bad_profile.json', 'text/json')
        post :upload, params: { file: @file }, session: valid_session
        expect(response).to redirect_to(profiles_path)
      end

    end

    describe 'DELETE #destroy' do
      it 'destroys the requested profile' do
        profile = create :profile, created_by: user
        expect {
          delete :destroy, params: { id: profile.to_param }, session: valid_session
        }.to change(Profile, :count).by(-1)
      end

      it 'redirects to the profiles list' do
        profile = create :profile, created_by: user
        delete :destroy, params: { id: profile.to_param }, session: valid_session
        expect(response).to redirect_to(profiles_url)
      end
    end

  end

  context 'admin is logged in' do
    let(:user) { FactoryBot.create(:admin) }
    before do
      db_sign_in user
    end

    describe 'DELETE #destroy' do
      it 'destroys the requested profile' do
        profile = create :profile, created_by: user
        expect {
          delete :destroy, params: { id: profile.to_param }, session: valid_session
        }.to change(Profile, :count).by(-1)
      end

      it 'redirects to the profiles list' do
        profile = create :profile, created_by: user
        delete :destroy, params: { id: profile.to_param }, session: valid_session
        expect(response).to redirect_to(profiles_url)
      end
    end
  end
end
